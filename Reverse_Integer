/*

Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.


*/

/*
  spending time : 1 hour less

*/



class Solution {
public:
    int reverse(int x) {

        if(x/10 == 0)
        {
            return x;
        }
        
        long long ans =0;
        int count =0;
        
        int input = x;
        int res = 0;
        
        while(input)
        {                        
            count = input%10;
            ans = ans * 10 + count;
            input = input/10;
        }         
        
        if(ans<INT_MIN || ans>INT_MAX )
        {
            return 0;
        }

        return ans;
    }
};
