/*

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

*/


/*
Spending Time : 1 hour more..
I was feeling difficulty because it is Linked list.
*/




/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {    
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode *temp = NULL;
        
        ListNode *res_result = NULL;        
        
        
        
        int data_sum = 0;
        int count = 0;
        
        while(l1 != NULL || l2 != NULL || data_sum>0)
        {
            if(l1 != NULL)
            {
                data_sum += l1->val;
                l1 = l1->next;
            }
            
            if(l2 != NULL)
            {
                data_sum += l2->val;
                l2 = l2->next;
            }            
            
            if(count ==0)
            {
                res_result = new ListNode(data_sum%10);        
                temp = res_result;
            }
            else
            {
                res_result->next = new ListNode(data_sum%10);
                res_result = res_result->next;  
            }
                        
            
            data_sum = data_sum/10;
            count++;
            
        }
        
        return temp;
   }
};
