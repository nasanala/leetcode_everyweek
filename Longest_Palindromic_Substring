/*

Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.


Example 1:
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.


Example 2:
Input: "cbbd"
Output: "bb"

*/


/*

  spending time : 1hour more
  check point : int aa = check_str(s,i,i);  
                int bb = check_str(s,i,i+1);
*/


class Solution {
public:
    string longestPalindrome(string s) {
        if(s.size() <2)
        {
           return s;
        }
        
        string ans;
        int start_str = 0;
        int len_str=0;
        int start = 0;
        int chec_str=0;
        
        for(int i=0; i<s.size(); i++)
        {
            int aa = check_str(s,i,i);
            int bb = check_str(s,i,i+1);
            len_str = max(aa,bb);

            if(len_str > chec_str)
            {
                start_str = i -((len_str-1) /2);
                chec_str = len_str;
            }
        }
        ans = s.substr(start_str, chec_str);
        return ans;
    }
  
   int check_str(string s, int left, int right)
   {
       while(left>=0 && right<s.size() && s[left]==s[right])
       {
           left--;
           right++;
       }
       int ansd = right - left;
       return ansd -1;
   }
};
